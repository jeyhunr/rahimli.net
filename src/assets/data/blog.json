{
  "blogs": [
    {
      "id": "1",
      "title": "Understanding TypeScript Generics",
      "description": "A deep dive into TypeScript generics and their practical applications",
      "content": "# Understanding TypeScript Generics\n\nTypeScript generics are a powerful feature that allows you to write flexible, reusable code while maintaining type safety...\n\n## What are Generics?\n\nGenerics allow you to write code that can work with multiple types while retaining type information...\n\n## Common Use Cases\n\n1. Generic Functions\n2. Generic Interfaces\n3. Generic Classes\n\n## Examples\n\n```typescript\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Usage\nlet output = identity<string>(\"myString\");\n```",
      "date": "2024-03-15",
      "tags": ["TypeScript", "Programming", "Web Development"],
      "readTime": "5 min read"
    },
    {
      "id": "2",
      "title": "Microservices with Node.js",
      "description": "Building scalable microservices architecture using Node.js",
      "content": "# Microservices with Node.js\n\nLearn how to build and deploy scalable microservices using Node.js...\n\n## What are Microservices?\n\nMicroservices are an architectural style that structures an application as a collection of small, independent services...\n\n## Key Benefits\n\n1. Scalability\n2. Maintainability\n3. Technology Flexibility\n\n## Implementation Example\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/users', async (req, res) => {\n    // Handle user service logic\n});\n```",
      "date": "2024-03-10",
      "tags": ["Microservices", "Node.js", "Backend"],
      "readTime": "8 min read"
    }
  ]
}
